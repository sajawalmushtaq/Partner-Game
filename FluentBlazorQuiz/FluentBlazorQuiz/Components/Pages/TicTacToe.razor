@page "/mini"
@rendermode InteractiveServer

<h3>Tic Tac Toe</h3>

<div>
    <p>Current Player: @currentPlayer</p>
</div>

<div class="tic-tac-toe-grid" style="display: grid; grid-template-columns: repeat(3, 100px); gap: 5px;">
    @for (int i = 0; i < board.Length; i++)
    {
        <button @onclick="() => HandleCellClick(i)" style="width:100px; height:100px; font-size:2em;">
            @(board[i] ?? "")
        </button>
    }
</div>

@if (winner != null)
{
    <h4>@winner wins!</h4>
}
else if (isDraw)
{
    <h4>It's a draw!</h4>
}

<button @onclick="ResetGame">Reset</button>

@code {
    // Using a nullable string array to hold cell values
    private string?[] board = new string?[9];
    private string currentPlayer = "X";
    private string? winner;
    private bool isDraw = false;

    private void HandleCellClick(int index)
    {
        // Do nothing if game is over or cell already filled
        if (winner != null || isDraw) return;
        if (!string.IsNullOrEmpty(board[index])) return;

        board[index] = currentPlayer;

        // Check for a win after the move
        if (CheckWinner())
        {
            winner = currentPlayer;
        }
        else if (board.All(cell => !string.IsNullOrEmpty(cell)))
        {
            isDraw = true;
        }
        else
        {
            currentPlayer = currentPlayer == "X" ? "O" : "X";
        }
        StateHasChanged();
    }

    private bool CheckWinner()
    {
        int[][] winPatterns = new int[][] {
             new int[] {0, 1, 2},
             new int[] {3, 4, 5},
             new int[] {6, 7, 8},
             new int[] {0, 3, 6},
             new int[] {1, 4, 7},
             new int[] {2, 5, 8},
             new int[] {0, 4, 8},
             new int[] {2, 4, 6}
     };

        foreach (var pattern in winPatterns)
        {
            if (!string.IsNullOrEmpty(board[pattern[0]]) &&
                board[pattern[0]] == board[pattern[1]] &&
                board[pattern[1]] == board[pattern[2]])
            {
                return true;
            }
        }
        return false;
    }

    private void ResetGame()
    {
        board = new string?[9];
        currentPlayer = "X";
        winner = null;
        isDraw = false;
        StateHasChanged();
    }
}
