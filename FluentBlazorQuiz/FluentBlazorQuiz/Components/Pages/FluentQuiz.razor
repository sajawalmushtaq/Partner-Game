@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS

<h3>Simple Addition Quiz</h3>

@if (isSubmitted)
{
    <h3>Results</h3>
    <p>Grade: @grade/100</p>
    <p>Total Time: @totalTime seconds</p>
    <ul>
        @for (int i = 0; i < questions.Count; i++)
        {
            <li>Question @(i + 1): @questions[i].ElapsedTime seconds</li>
        }
    </ul>
}
else if (isPaused)
{
    <h4>Quiz Paused</h4>
    <FluentButton OnClick="ResumeQuiz">Resume Quiz</FluentButton>
}
else
{
    <div>
        <p>Time Elapsed for this question: @currentTime seconds</p>
        <FluentButton OnClick="PauseQuiz">Pause Quiz</FluentButton>
    </div>

    <div>
        <p>Question @((currentQuestionIndex + 1)) of @questions.Count</p>
        <p>@questions[currentQuestionIndex].Text</p>

        @if (questions[currentQuestionIndex].Type == QuestionType.MultipleChoice)
        {
            <div class="fluent-radio-group">
                @foreach (var option in questions[currentQuestionIndex].Options)
                {
                    <div class="fluent-radio-option">
                        <input type="radio" id="option-@option" name="mcq-@currentQuestionIndex" value="@option"
                               checked="@(questions[currentQuestionIndex].SelectedAnswer == option)"
                               @onchange="() => SelectOption(option)" />
                        <label for="option-@option">@option</label>
                    </div>
                }
            </div>
        }
        else if (questions[currentQuestionIndex].Type == QuestionType.Text)
        {
            <FluentTextField @bind-Value="questions[currentQuestionIndex].TextAnswer" />
        }
        else if (questions[currentQuestionIndex].Type == QuestionType.Checkbox)
        {
            @foreach (var option in questions[currentQuestionIndex].Options)
            {
                <div>
                    <FluentCheckbox OnChange="e => ToggleCheckbox(currentQuestionIndex, option, ((ChangeEventArgs)e).Value)"
                                    Checked="@(questions[currentQuestionIndex].CheckboxAnswers.Contains(option))" />
                    <label>@option</label>
                </div>
            }
        }
        else if (questions[currentQuestionIndex].Type == QuestionType.Image)
        {
            <!-- For image-based questions, display the pie chart.
                 DROP YOUR PIE CHART FILE LINK EXACTLY HERE by replacing the placeholder in ImageUrl -->
            <img src="@questions[currentQuestionIndex].ImageUrl" alt="Pie Chart" style="max-width:300px;" />
            <!-- Expected fraction:
                 For one image question: 3/8
                 For the other image question: 1/4 -->
            <p>Enter your answer:</p>
            <FluentTextField @bind-Value="questions[currentQuestionIndex].TextAnswer" />
        }
    </div>

    <div>
        <FluentButton OnClick="PreviousQuestion" Disabled="@(currentQuestionIndex == 0)">Previous</FluentButton>
        @if (currentQuestionIndex < questions.Count - 1)
        {
            <FluentButton OnClick="NextQuestion">Next</FluentButton>
        }
        else
        {
            <FluentButton OnClick="SubmitQuiz">Submit</FluentButton>
        }
    </div>
}

@code {
    private List<Question> questions = new List<Question>();
    private int currentQuestionIndex = 0;
    private int currentTime = 0; // Elapsed seconds for current question
    private System.Threading.Timer? timer;
    private bool isPaused = false;
    private bool isSubmitted = false;
    private int grade = 0;
    private int totalTime = 0;
    private Random rnd = new Random();

    protected override void OnInitialized()
    {
        InitializeQuestions();
        StartTimer();
    }

    private void InitializeQuestions()
    {
        questions.Clear();
        // Create 8 standard addition questions with randomized operands and types
        for (int i = 0; i < 8; i++)
        {
            int a = rnd.Next(1, 11);
            int b = rnd.Next(1, 11);
            int correctAnswer = a + b;
            string questionText = $"What is {a} + {b}?";

            // Randomly choose question type: MultipleChoice, Text, or Checkbox
            QuestionType qType = (QuestionType)rnd.Next(0, 3); // 0=MultipleChoice, 1=Text, 2=Checkbox

            var question = new Question
                {
                    Text = questionText,
                    Type = qType,
                    CorrectAnswer = correctAnswer,
                    ElapsedTime = 0
                };

            if (qType == QuestionType.MultipleChoice || qType == QuestionType.Checkbox)
            {
                List<string> options = new List<string>
                {
                    correctAnswer.ToString(),
                    (correctAnswer + 1).ToString(),
                    (correctAnswer > 1 ? (correctAnswer - 1).ToString() : (correctAnswer + 2).ToString())
                };
                // Shuffle options
                question.Options = options.OrderBy(x => rnd.Next()).ToList();
            }
            questions.Add(question);
        }

        // Create 2 image-based (pie chart) questions with fixed expected fractions
        var imageQuestion1 = new Question
            {
                Text = "What fraction does this pie chart show? (Pie Chart Question)",
                Type = QuestionType.Image,
                ImageUrl = "INSERT_PIE_CHART_IMAGE_LINK_HERE", // Drop your pie chart file link here
                CorrectFraction = "3/8",
                ElapsedTime = 0
            };

        var imageQuestion2 = new Question
            {
                Text = "What fraction does this pie chart show? (Pie Chart Question)",
                Type = QuestionType.Image,
                ImageUrl = "INSERT_PIE_CHART_IMAGE_LINK_HERE", // Drop your pie chart file link here
                CorrectFraction = "1/4",
                ElapsedTime = 0
            };

        questions.Add(imageQuestion1);
        questions.Add(imageQuestion2);

        // Randomize order of all 10 questions
        questions = questions.OrderBy(x => rnd.Next()).ToList();
    }

    private void StartTimer()
    {
        timer?.Dispose();
        currentTime = questions[currentQuestionIndex].ElapsedTime;
        timer = new System.Threading.Timer(Callback, null, 1000, 1000);
    }

    private void Callback(object? state)
    {
        if (!isPaused)
        {
            currentTime++;
            questions[currentQuestionIndex].ElapsedTime = currentTime;
            InvokeAsync(StateHasChanged);
        }
    }

    private void PauseQuiz() => isPaused = true;
    private void ResumeQuiz() => isPaused = false;

    private void NextQuestion()
    {
        // Save current question time then move on
        questions[currentQuestionIndex].ElapsedTime = currentTime;
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
            currentTime = questions[currentQuestionIndex].ElapsedTime;
        }
    }

    private void PreviousQuestion()
    {
        questions[currentQuestionIndex].ElapsedTime = currentTime;
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
            currentTime = questions[currentQuestionIndex].ElapsedTime;
        }
    }

    private void SelectOption(string option)
    {
        questions[currentQuestionIndex].SelectedAnswer = option;
    }

    // Updated method now accepts a question index so that each checkbox is updated independently
    private void ToggleCheckbox(int questionIndex, string option, object checkedValue)
    {
        bool isChecked = checkedValue is bool b && b;
        if (isChecked)
        {
            if (!questions[questionIndex].CheckboxAnswers.Contains(option))
            {
                questions[questionIndex].CheckboxAnswers.Add(option);
            }
        }
        else
        {
            questions[questionIndex].CheckboxAnswers.Remove(option);
        }
    }

    private async Task SubmitQuiz()
    {
        // Check for unanswered questions
        List<int> unanswered = new List<int>();
        for (int i = 0; i < questions.Count; i++)
        {
            var q = questions[i];
            if (q.Type == QuestionType.MultipleChoice)
            {
                if (string.IsNullOrEmpty(q.SelectedAnswer))
                    unanswered.Add(i + 1);
            }
            else if (q.Type == QuestionType.Text || q.Type == QuestionType.Image)
            {
                if (string.IsNullOrWhiteSpace(q.TextAnswer))
                    unanswered.Add(i + 1);
            }
            else if (q.Type == QuestionType.Checkbox)
            {
                if (q.CheckboxAnswers == null || q.CheckboxAnswers.Count == 0)
                    unanswered.Add(i + 1);
            }
        }
        if (unanswered.Any())
        {
            string message = "Questions Unanswered: " + string.Join(", ", unanswered) + ". Answer before moving on.";
            await JS.InvokeVoidAsync("alert", message);
            return;
        }

        // Grade each question: each correct answer awards 10 points (total out of 100)
        int score = 0;
        foreach (var q in questions)
        {
            if (q.Type == QuestionType.MultipleChoice)
            {
                if (!string.IsNullOrEmpty(q.SelectedAnswer) && int.TryParse(q.SelectedAnswer, out int ans))
                {
                    if (ans == q.CorrectAnswer)
                        score += 10;
                }
            }
            else if (q.Type == QuestionType.Text)
            {
                if (!string.IsNullOrWhiteSpace(q.TextAnswer) && int.TryParse(q.TextAnswer, out int ans))
                {
                    if (ans == q.CorrectAnswer)
                        score += 10;
                }
            }
            else if (q.Type == QuestionType.Checkbox)
            {
                // For checkbox questions, expect only one correct option to be checked
                if (q.CheckboxAnswers.Count == 1 && int.TryParse(q.CheckboxAnswers.First(), out int ans))
                {
                    if (ans == q.CorrectAnswer)
                        score += 10;
                }
            }
            else if (q.Type == QuestionType.Image)
            {
                // Compare fraction answers (exact string match after trimming)
                if (!string.IsNullOrWhiteSpace(q.TextAnswer) && q.TextAnswer.Trim() == q.CorrectFraction)
                    score += 10;
            }
        }
        grade = score;
        totalTime = questions.Sum(q => q.ElapsedTime);
        isSubmitted = true;
        timer?.Dispose();
        StateHasChanged();
    }

    public class Question
    {
        public string Text { get; set; } = "";
        public QuestionType Type { get; set; }
        public List<string> Options { get; set; } = new List<string>();
        public string? SelectedAnswer { get; set; }
        public string TextAnswer { get; set; } = "";
        public List<string> CheckboxAnswers { get; set; } = new List<string>();
        public string ImageUrl { get; set; } = "";
        public int ElapsedTime { get; set; }
        public int? CorrectAnswer { get; set; }
        public string? CorrectFraction { get; set; }
    }

    public enum QuestionType
    {
        MultipleChoice,
        Text,
        Checkbox,
        Image
    }
}
